
package com.mycompany.tablestudent;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import javax.swing.JComboBox;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import java.util.Arrays;


/**
 *
 * @author makal
 */


abstract class Student {
    final private String name;
    final private String group;

    public Student(String name, String group) {
        this.name = name;
        this.group = group;
    }

    public Student(String name) {
        this(name, "No Group");
    }

    public String getName() {
        return name;
    }

    public String getGroup() {
        return group;
    }
}

class GroupedStudent extends Student {
    public GroupedStudent(String name, String group) {
        super(name, group);
    }
}

class UngroupedStudent extends Student {
    public UngroupedStudent(String name) {
        super(name);
    }
}


public class tableDate extends javax.swing.JFrame {

    /**
     * Creates new form tableDate
     * @param tableData
     */
    
    public tableDate(String[][] tableData) {
        initComponents();
        populateTable(tableData);
    }
    
    private boolean containsItem(JComboBox<String> comboBox, String item) {
    for (int i = 0; i < comboBox.getItemCount(); i++) {
        if (comboBox.getItemAt(i).equals(item)) {
            return true;
        }
    }
    return false;
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jOptionPane = new javax.swing.JOptionPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jAddAttendance = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableDatas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jNamesLOL = new javax.swing.JComboBox<>();
        jGroupsLOL = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jButtonExport = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Group"
            }
        ));
        jScrollPane2.setViewportView(jTable);
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setResizable(false);
            jTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jAddAttendance.setText("Attendance");
        jAddAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddAttendanceActionPerformed(evt);
            }
        });

        jTableDatas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Group", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableDatas);
        if (jTableDatas.getColumnModel().getColumnCount() > 0) {
            jTableDatas.getColumnModel().getColumn(0).setResizable(false);
            jTableDatas.getColumnModel().getColumn(1).setResizable(false);
            jTableDatas.getColumnModel().getColumn(2).setResizable(false);
        }

        jButton1.setText("Sort");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jNamesLOL.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));

        jGroupsLOL.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));

        jButton2.setText("Sort By Date");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButtonExport.setText("EXPORT");
        jButtonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jAddAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(90, 90, 90)
                                        .addComponent(jNamesLOL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jGroupsLOL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(69, 69, 69)
                                        .addComponent(jButton1)
                                        .addGap(27, 27, 27))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButtonExport, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(86, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jAddAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(148, 148, 148)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jNamesLOL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jGroupsLOL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1))
                                .addGap(15, 15, 15)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonExport, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jAddAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddAttendanceActionPerformed
        Date selectedDate = showDatePickerDialog(this, new Date());
        if (selectedDate != null) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String pickedDate = dateFormat.format(selectedDate);
            // Get the selected row index from jTable
            int selectedRow = jTable.getSelectedRow();
            if (selectedRow != -1) {
                String selectedName = (String) jTable.getValueAt(selectedRow, 0);
                String selectedGroup = (String) jTable.getValueAt(selectedRow, 1);
                DefaultTableModel model = (DefaultTableModel) jTableDatas.getModel();
                model.addRow(new Object[]{selectedName, selectedGroup, pickedDate});
                addAttendance(selectedName, pickedDate);
                if (jNamesLOL.getItemCount() == 0 || !containsItem(jNamesLOL, selectedName)) {
                    jNamesLOL.addItem(selectedName);
                }
                if (jGroupsLOL.getItemCount() == 0 || !containsItem(jGroupsLOL, selectedGroup)) {
                    jGroupsLOL.addItem(selectedGroup);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a student from the table.");
            }
        } else {
            System.out.println("No date selected.");
        }
    }//GEN-LAST:event_jAddAttendanceActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            // Get the selected item from jNamesLOL and jGroupsLOL
    String selectedName = (String) jNamesLOL.getSelectedItem();
    String selectedGroup = (String) jGroupsLOL.getSelectedItem();
    
    // Create a filter for the table data based on selectedName and selectedGroup
    RowFilter<Object, Object> nameFilter;
    RowFilter<Object, Object> groupFilter;
    
    // Apply name filter
    if (selectedName.equals("All")) {
        nameFilter = RowFilter.regexFilter(".*");
    } else {
        nameFilter = RowFilter.regexFilter(selectedName, 0);
    }

    if (selectedGroup.equals("All")) {
        groupFilter = RowFilter.regexFilter(".*");
    } else {
        groupFilter = RowFilter.regexFilter(selectedGroup, 1);
    }

    RowFilter<Object, Object> combinedFilter = RowFilter.andFilter(Arrays.asList(nameFilter, groupFilter));

    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) jTableDatas.getModel());
    sorter.setRowFilter(combinedFilter);
    jTableDatas.setRowSorter(sorter);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            DateIntervalDialog dialog = new DateIntervalDialog(this);
        dialog.setVisible(true);
        Date[] selectedDates = dialog.getSelectedDates();

        if (selectedDates != null && selectedDates.length == 2) {
            Date startDate = selectedDates[0];
            Date endDate = selectedDates[1];
            filterTableByDateInterval(startDate, endDate);
        } else {
            JOptionPane.showMessageDialog(this, "Invalid date interval selected.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportActionPerformed
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter(file));
                DefaultTableModel model = (DefaultTableModel) jTableDatas.getModel();
                for (int row = 0; row < model.getRowCount(); row++) {
                    for (int col = 0; col < model.getColumnCount(); col++) {
                        writer.write(model.getValueAt(row, col).toString());
                        if (col < model.getColumnCount() - 1) {
                            writer.write(",");
                        }
                    }
                    writer.newLine();
                }
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonExportActionPerformed

    
    private void filterTableByDateInterval(Date startDate, Date endDate) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) jTableDatas.getModel());
    
    RowFilter<DefaultTableModel, Object> dateFilter = new RowFilter<DefaultTableModel, Object>() {
        @Override
        public boolean include(Entry<? extends DefaultTableModel, ? extends Object> entry) {
            try {
                String dateString = (String) entry.getValue(2);
                Date date = dateFormat.parse(dateString);
                return !date.before(startDate) && !date.after(endDate);
            } catch (Exception e) {
                e.printStackTrace();
                return false;
            }
        }
    };
    
    sorter.setRowFilter(dateFilter);
    jTableDatas.setRowSorter(sorter);
}

class DateIntervalDialog extends JDialog {
    private JSpinner startDateSpinner;
    private JSpinner endDateSpinner;
    private JButton okButton;
    private JButton cancelButton;
    private Date[] selectedDates;

    public DateIntervalDialog(Frame parent) {
        super(parent, "Select Date Interval", true);
        
        startDateSpinner = new JSpinner(new SpinnerDateModel());
        startDateSpinner.setEditor(new JSpinner.DateEditor(startDateSpinner, "yyyy-MM-dd"));

        endDateSpinner = new JSpinner(new SpinnerDateModel());
        endDateSpinner.setEditor(new JSpinner.DateEditor(endDateSpinner, "yyyy-MM-dd"));

        okButton = new JButton("OK");
        okButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                selectedDates = new Date[2];
                selectedDates[0] = (Date) startDateSpinner.getValue();
                selectedDates[1] = (Date) endDateSpinner.getValue();
                dispose();
            }
        });

        cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                selectedDates = null;
                dispose();
            }
        });

        JPanel panel = new JPanel(new GridLayout(3, 2));
        panel.add(new JLabel("Start Date:"));
        panel.add(startDateSpinner);
        panel.add(new JLabel("End Date:"));
        panel.add(endDateSpinner);
        panel.add(okButton);
        panel.add(cancelButton);

        setContentPane(panel);
        pack();
        setLocationRelativeTo(parent);
    }

    public Date[] getSelectedDates() {
        return selectedDates;
    }
}

private void addAttendance(String selectedName, String pickedDate) {
    System.out.println("attended " + selectedName + " on " + pickedDate);
}
    /**
     * @param args the command line arguments
     */
    
    
    private void populateTable(String[][] tableData) {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable.getModel();
        for (String[] rowData : tableData) {
            String name = rowData[0];
            String group = rowData[1];
            Student student;
            if (group.equals("No Group")) {
                student = new UngroupedStudent(name);
            } else {
                student = new GroupedStudent(name, group);
            }
            model.addRow(new Object[]{student.getName(), student.getGroup()});
        }
    }

    public static Date showDatePickerDialog(Frame parent, Date initialDate) {
        DatePickerDialog dialog = new DatePickerDialog(parent, initialDate);
        dialog.setVisible(true);
        return dialog.getSelectedDate();
    }
    
    
    public void setNames(String[] names) {
        for (String name : names) {
            jNamesLOL.addItem(name);
        }
    }

    public void setGroups(String[] groups) {
        for (String group : groups) {
            jGroupsLOL.addItem(group);
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tableDate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tableDate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tableDate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tableDate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        

        /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            // Create an instance of tableCool to get its data
            tableCool tableCoolInstance = new tableCool();
            // Get the table data from tableCool
            String[][] tableData = tableCoolInstance.getTableData();
            // Create an instance of tableDate with the table data
            new tableDate(tableData).setVisible(true);
        }
    });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAddAttendance;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonExport;
    private javax.swing.JComboBox<String> jGroupsLOL;
    private javax.swing.JComboBox<String> jNamesLOL;
    private javax.swing.JOptionPane jOptionPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableDatas;
    // End of variables declaration//GEN-END:variables
}

class DatePickerDialog extends JDialog {
    private JSpinner spinner;
    private JButton okButton;
    private JButton cancelButton;
    private SimpleDateFormat dateFormat;
    private Date selectedDate;

    public DatePickerDialog(Frame parent, Date initialDate) {
        super(parent, "Select Date", true);
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        spinner = new JSpinner(new SpinnerDateModel());
        spinner.setEditor(new JSpinner.DateEditor(spinner, "yyyy-MM-dd"));
        spinner.setValue(initialDate);

        okButton = new JButton("OK");
        okButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                selectedDate = (Date) spinner.getValue();
                dispose();
            }
        });

        cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                selectedDate = null;
                dispose();
            }
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(okButton);
        buttonPanel.add(cancelButton);

        JPanel contentPane = new JPanel(new BorderLayout());
        contentPane.add(spinner, BorderLayout.CENTER);
        contentPane.add(buttonPanel, BorderLayout.SOUTH);

        setContentPane(contentPane);
        pack();
        setLocationRelativeTo(parent);
    }

    public Date getSelectedDate() {
        return selectedDate;
    }
    
}

